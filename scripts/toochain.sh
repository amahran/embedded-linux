#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

# Function to clean up variables and other resources
cleanup() {
    unset MAKEFLAGS
    unset CROSSTOOL_NG_PATH
    echo "Cleaned up environment variables."
}

# Trap the EXIT signal to call the cleanup function
trap cleanup EXIT

# Update and upgrade the system
sudo apt update && sudo apt -y upgrade

# Install pre-requisites
sudo apt install -y autoconf automake bison bzip2 cmake flex g++ gawk gcc gettext \
    git gperf help2man libncurses5-dev libstdc++6 libtool libtool-bin make \
    patch python3-dev rsync texinfo unzip wget xz-utils

# Set the number of parallel jobs for make
export MAKEFLAGS="-j$(nproc)"


# Clone and install crosstool-ng
CROSSTOOL_NG_PATH=../crosstool-ng
# Check if the crosstool-ng directory exists and remove it if it does
if [ -d "$CROSSTOOL_NG_PATH" ]; then
    echo "Removing existing crosstool-ng directory..."
    sudo rm -rf $CROSSTOOL_NG_PATH
fi
git clone https://github.com/crosstool-ng/crosstool-ng.git $CROSSTOOL_NG_PATH
cd $CROSSTOOL_NG_PATH
# Note this is a different version than the one used in the book 1.24
# Some of the tools used in 1.24 cannot be compiled with a gcc version > 10
# Also, some links are outdated
# Although the issue can be easily solved by correcting the links and installing 
# a gcc version <= 10, it's better to use the latest crosstool-ng to make things easy
git checkout crosstool-ng-1.26.0
./bootstrap
# Prefix is used to tell the make to install the tools in the current working 
# directory, not in the default system locations
./configure --prefix=${PWD}
make
sudo make install

# Define the options
echo "Build crosstool-ng for:"
options=("QEMU" "BeagleBone Black" "both")

# Function to build crosstool-ng for QEMU
build_qemu() {
    echo "Building crosstool-ng for QEMU..."
    # Clean artifacts generated by any previous build if any
    $CROSSTOOL_NG_PATH/bin/ct-ng distclean
    # # Select the target configurations (based on the sample cfg arm-unknown-linux-gnueabi)
    # $CROSSTOOL_NG_PATH/bin/ct-ng arm-unknown-linux-gnueabi
    # # Tweak the configurations
    # $CROSSTOOL_NG_PATH/bin/ct-ng menuconfig
    cp ../scripts/.config_qemu $CROSSTOOL_NG_PATH/.config
    # Build the toolchain
    $CROSSTOOL_NG_PATH/bin/ct-ng build
    # Add the toolchain to the system PATH
    echo "export PATH=~/x-tools/arm-unknown-linux-gnueabi/bin:\$PATH" >> ~/.zsh_profile
}

# Function to build crosstool-ng for BeagleBone Black
build_beaglebone() {
    echo "Building crosstool-ng for BeagleBone Black..."
    $CROSSTOOL_NG_PATH/bin/ct-ng distclean
    # $CROSSTOOL_NG_PATH/bin/ct-ng arm-cortex_a8-linux-gnueabi
    # $CROSSTOOL_NG_PATH/bin/ct-ng menuconfig
    cp ../scripts/.config_bbb $CROSSTOOL_NG_PATH/.config
    $CROSSTOOL_NG_PATH/bin/ct-ng build
    echo "export PATH=~/x-tools/arm-cortex_a8-linux-gnueabihf/bin:\$PATH" >> ~/.zsh_profile
}

# Function to build crosstool-ng for both
build_both() {
    echo "Building crosstool-ng for both QEMU and BeagleBone Black..."
    build_qemu
    build_beaglebone
}

# Display the menu and prompt for a choice
echo "Please select an option to build crosstool-ng:"
select opt in "${options[@]}"; do
    case $REPLY in
        1)
            build_qemu
            break
            ;;
        2)
            build_beaglebone
            break
            ;;
        3)
            build_both
            break
            ;;
        *)
            echo "Invalid option. Please try again."
            ;;
    esac
done

